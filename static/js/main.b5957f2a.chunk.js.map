{"version":3,"sources":["components/ui/Theme.js","components/Header.js","components/Cards/Cards.js","components/fetchFunctions/fetchMainChartData.js","components/fetchFunctions/fetchSecChartData.js","components/Charts/Charts.js","components/fetchFunctions/fetchCardsData.js","components/fetchFunctions/fetchChartsData.js","components/App.js","index.js"],"names":["createMuiTheme","palette","common","greyBlue","blackSecondary","primary","main","secondary","typography","fontFamily","overrides","MuiCssBaseline","MuiAppBar","boxShadow","useStyles","makeStyles","theme","title","margin","textAlign","boxHeader","marginBottom","boxContainer","Header","classes","Box","justifyContent","borderBottom","className","Container","Typography","variant","align","gutterBottom","Icon","paperBox1","backgroundColor","color","paperBox2","paperBox3","paperBox4","Cards","data","Fragment","Grid","container","spacing","justify","item","component","Card","xs","lg","md","CardContent","fontSize","confirmed","deltaconfirmed","active","recovered","deltarecovered","deaths","deltadeaths","fetchMainChartData","dates","total","mainData","options","undefined","labels","datasets","label","borderColor","fill","tooltips","mode","position","intersect","hover","animation","duration","easing","scales","xAxes","gridLines","display","ticks","callback","dataLabel","index","maxRotation","minRotation","yAxes","fetchSecChartData","stacked","Charts","props","useState","mainChartData","setMainChartData","secChartData","setSecChartData","useEffect","setData","fetchCardsData","initData","selectedState","statewise","filter","statecode","fetchChartsData","historyData","latestData","cardsData","chartsData","cases_time_series","forEach","push","date","totalconfirmed","totaldeceased","totalrecovered","tempDay","lastupdatedtime","slice","tempMonth","parseInt","App","latest_Response","setLatestResponse","history_Response","setHistoryResponse","setSelectedState","setCardsData","setChartsData","fetchResources","a","axios","get","latestResponse","historyResponse","states_daily","ThemeProvider","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b5957f2a.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst greyBlue = \"#f5f5f5\";\r\nconst blackSecondary = \"#212121\";\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    common: {\r\n      greyBlue: `${greyBlue}`,\r\n      blackSecondary: `${blackSecondary}`,\r\n    },\r\n    primary: {\r\n      main: `${greyBlue}`,\r\n    },\r\n    secondary: {\r\n      main: `${blackSecondary}`,\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: [\"Maven Pro\", \"sans-serif\"],\r\n  },\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      \"@global\": {\r\n        \"@font-face\": [\"Maven Pro\"],\r\n      },\r\n    },\r\n    MuiAppBar: {\r\n      boxShadow: \"none\",\r\n    },\r\n  },\r\n});\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Container, Box, Typography, Icon } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    margin: \"0px\",\r\n    textAlign: \"center\",\r\n  },\r\n  boxHeader: {\r\n    marginBottom: \"1rem\",\r\n  },\r\n  boxContainer: {\r\n    // marginBottom: \"1rem\",\r\n  },\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box justifyContent=\"center\" borderBottom={1} className={classes.boxHeader}>\r\n      <Container className={classes.boxContainer}>\r\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n          COVID19 <Icon className=\"fa fa-biohazard\"></Icon> INDIA\r\n        </Typography>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\n// UI imports\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Card, CardContent, Icon, Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paperBox1: {\r\n    margin: \"2%\",\r\n    backgroundColor: \"#ffcdd2\",\r\n    color: \"#b71c1c\",\r\n    borderBottom: \"10px solid #b71c1c\",\r\n    textAlign: \"center !important\",\r\n  },\r\n  paperBox2: {\r\n    margin: \"2%\",\r\n    backgroundColor: \"#bbdefb\",\r\n    color: \"#0d47a1\",\r\n    borderBottom: \"10px solid #0d47a1\",\r\n    textAlign: \"center !important\",\r\n  },\r\n  paperBox3: {\r\n    margin: \"2%\",\r\n    backgroundColor: \"#c8e6c9\",\r\n    color: \"#1b5e20\",\r\n    borderBottom: \"10px solid #1b5e20\",\r\n    textAlign: \"center !important\",\r\n  },\r\n  paperBox4: {\r\n    margin: \"2%\",\r\n    backgroundColor: \"#cfd8dc\",\r\n    color: \"#263238\",\r\n    borderBottom: \"10px solid #263238\",\r\n    textAlign: \"center !important\",\r\n  },\r\n}));\r\n\r\nconst Cards = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  if (!data) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={5}\r\n          lg={5}\r\n          md={5}\r\n          className={classes.paperBox1}\r\n        >\r\n          <CardContent>\r\n            {/* <CountUp end={100} /> */}\r\n            <Typography variant=\"h5\">Confirmed</Typography>\r\n            <Icon className=\"fa fa-virus\" fontSize=\"large\"></Icon>\r\n            <Typography variant=\"h5\">{data.confirmed}</Typography>\r\n            <Typography variant=\"body2\">+{data.deltaconfirmed}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={5}\r\n          lg={5}\r\n          md={5}\r\n          className={classes.paperBox2}\r\n        >\r\n          <CardContent>\r\n            <Typography variant=\"h5\">Active</Typography>\r\n            <Icon className=\"fa fa-hospital-user\" fontSize=\"large\"></Icon>\r\n            <Typography variant=\"h5\">{data.active}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={5}\r\n          lg={5}\r\n          md={5}\r\n          className={classes.paperBox3}\r\n        >\r\n          <CardContent>\r\n            <Typography variant=\"h5\">Recovered</Typography>\r\n            <Icon className=\"fa fa-shield-virus\" fontSize=\"large\"></Icon>\r\n            <Typography variant=\"h5\">{data.recovered}</Typography>\r\n            <Typography variant=\"body2\">+{data.deltarecovered}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={5}\r\n          lg={5}\r\n          md={5}\r\n          className={classes.paperBox4}\r\n        >\r\n          <CardContent>\r\n            <Typography variant=\"h5\">Deaths</Typography>\r\n            <Icon className=\"fa fa-skull-crossbones\" fontSize=\"large\"></Icon>\r\n            <Typography variant=\"h5\">{data.deaths}</Typography>\r\n            <Typography variant=\"body2\">+{data.deltadeaths}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","const fetchMainChartData = (dates, total) => {\r\n  const mainData = {\r\n    data: {},\r\n    options: {},\r\n  };\r\n  if (dates === undefined) {\r\n    return mainData;\r\n  } else {\r\n    mainData.data = {\r\n      labels: dates,\r\n      datasets: [\r\n        {\r\n          label: \"Total Confirmed Cases\",\r\n          data: total,\r\n          backgroundColor: \"rgba(255, 100, 100, 1)\",\r\n          borderColor: \"rgba(255, 100, 100, 1)\",\r\n          // borderWidth: 5,\r\n          fill: false,\r\n        },\r\n      ],\r\n    };\r\n    mainData.options = {\r\n      tooltips: {\r\n        mode: \"index\",\r\n        position: \"nearest\",\r\n        intersect: false,\r\n      },\r\n      hover: {\r\n        mode: \"index\",\r\n      },\r\n      animation: {\r\n        duration: 4000,\r\n        easing: \"easeInExpo\",\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            gridLines: {\r\n              display: true,\r\n            },\r\n            ticks: {\r\n              callback: function (dataLabel, index) {\r\n                // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                return index % 2 === 0 ? dataLabel : null;\r\n              },\r\n              maxRotation: 0,\r\n              minRotation: 0,\r\n            },\r\n          },\r\n        ],\r\n        yAxes: [\r\n          {\r\n            gridLines: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              callback: function (dataLabel, index) {\r\n                // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                return index % 2 === 0 ? dataLabel : null;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n    return mainData;\r\n  }\r\n};\r\n\r\nexport default fetchMainChartData;\r\n","const fetchSecChartData = (dates, active, recovered, deaths) => {\r\n  const mainData = {\r\n    data: {},\r\n    options: {},\r\n  };\r\n  if (dates === undefined) {\r\n    return mainData;\r\n  } else {\r\n    // Main logic --\r\n    mainData.data = {\r\n      labels: dates,\r\n      datasets: [\r\n        {\r\n          label: \"Deaths\",\r\n          data: deaths,\r\n          backgroundColor: \"#607d8b\",\r\n          borderColor: \"#607d8b\",\r\n          // borderWidth: 5,\r\n          // fill: false,\r\n        },\r\n        {\r\n          label: \"Recovered\",\r\n          data: recovered,\r\n          backgroundColor: \"#03a9f4\",\r\n          borderColor: \"#03a9f4\",\r\n          // borderWidth: 5,\r\n          // fill: false,\r\n        },\r\n        {\r\n          label: \"Active Cases\",\r\n          data: active,\r\n          backgroundColor: \"rgba(255, 100, 100, 1)\",\r\n          borderColor: \"rgba(255, 100, 100, 1)\",\r\n          // borderWidth: 5,\r\n          // fill: false,\r\n        },\r\n      ],\r\n    };\r\n    mainData.options = {\r\n      tooltips: {\r\n        mode: \"index\",\r\n        position: \"nearest\",\r\n        intersect: false,\r\n      },\r\n      hover: {\r\n        mode: \"index\",\r\n      },\r\n      animation: {\r\n        duration: 4000,\r\n        easing: \"easeInExpo\",\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            gridLines: {\r\n              display: true,\r\n            },\r\n            ticks: {\r\n              callback: function (dataLabel, index) {\r\n                // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                return index % 2 === 0 ? dataLabel : null;\r\n              },\r\n              maxRotation: 0,\r\n              minRotation: 0,\r\n            },\r\n          },\r\n        ],\r\n        yAxes: [\r\n          {\r\n            stacked: true,\r\n            gridLines: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              callback: function (dataLabel, index) {\r\n                // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                return index % 2 === 0 ? dataLabel : null;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n    return mainData;\r\n  }\r\n};\r\n\r\nexport default fetchSecChartData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport fetchMainChartData from \"../fetchFunctions/fetchMainChartData\";\r\nimport fetchSecChartData from \"../fetchFunctions/fetchSecChartData\";\r\n\r\nconst Charts = (props) => {\r\n  const [mainChartData, setMainChartData] = useState({\r\n    data: {},\r\n    options: {},\r\n  });\r\n  const [secChartData, setSecChartData] = useState({\r\n    data: {},\r\n    options: {},\r\n  });\r\n\r\n  // Set state which will be used to render Graphs\r\n  const setData = () => {\r\n    if (props.data === null) {\r\n      return null;\r\n    }\r\n    setMainChartData(fetchMainChartData(props.data.dates, props.data.total));\r\n    setSecChartData(\r\n      fetchSecChartData(\r\n        props.data.dates,\r\n        props.data.active,\r\n        props.data.recovered,\r\n        props.data.deaths\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setData();\r\n  }, [props.data]);\r\n\r\n  if (!props.data) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Line data={mainChartData.data} options={mainChartData.options} />\r\n      <Line data={secChartData.data} options={secChartData.options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","const fetchCardsData = (initData, selectedState) => {\r\n  if (initData.statewise === undefined) {\r\n    // console.log(initData, selectedState);\r\n    return {};\r\n  } else {\r\n    // If selected is Total(India)\r\n    if (selectedState === \"TT\") {\r\n      // console.log(initData, selectedState);\r\n      const data = initData.statewise.filter((data) => {\r\n        return data.statecode === \"TT\";\r\n      });\r\n      return data[0];\r\n    }\r\n  }\r\n};\r\n\r\nexport default fetchCardsData;\r\n","import fetchCardsData from \"./fetchCardsData\";\r\n\r\nconst fetchChartsData = (historyData, latestData, selectedState) => {\r\n  // Global variable\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  if (historyData[0] === undefined) {\r\n    return {};\r\n  } else {\r\n    // Logic for Total scenario\r\n    if (selectedState === \"TT\") {\r\n      const cardsData = fetchCardsData(latestData, selectedState);\r\n      const chartsData = {\r\n        dates: [],\r\n        total: [],\r\n        active: [],\r\n        recovered: [],\r\n        deaths: [],\r\n      };\r\n      latestData.cases_time_series.forEach((data) => {\r\n        chartsData.dates.push(data.date);\r\n        chartsData.total.push(data.totalconfirmed);\r\n        chartsData.active.push(\r\n          data.totalconfirmed - data.totaldeceased - data.totalrecovered\r\n        );\r\n        chartsData.recovered.push(data.totalrecovered);\r\n        chartsData.deaths.push(data.totaldeceased);\r\n      });\r\n      // console.log(dates, total, active, recovered, deaths);\r\n      const tempDay = cardsData.lastupdatedtime.slice(0, 2);\r\n      const tempMonth = cardsData.lastupdatedtime.slice(3, 5);\r\n      chartsData.dates.push(`${tempDay} ${months[parseInt(tempMonth) - 1]}`);\r\n      chartsData.total.push(cardsData.confirmed);\r\n      chartsData.active.push(cardsData.active);\r\n      chartsData.recovered.push(cardsData.recovered);\r\n      chartsData.deaths.push(cardsData.deaths);\r\n      return chartsData;\r\n    }\r\n  }\r\n  return {};\r\n};\r\n\r\nexport default fetchChartsData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n\r\nimport theme from \"./ui/Theme\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nimport Header from \"./Header\";\r\nimport Cards from \"./Cards/Cards\";\r\nimport Charts from \"./Charts/Charts\";\r\nimport fetchCardsData from \"./fetchFunctions/fetchCardsData\";\r\nimport fetchChartsData from \"./fetchFunctions/fetchChartsData\";\r\n\r\nconst App = () => {\r\n  // Latest Response state\r\n  const [latest_Response, setLatestResponse] = useState({});\r\n  // History response state\r\n  const [history_Response, setHistoryResponse] = useState([]);\r\n  // Selected States state\r\n  const [selectedState, setSelectedState] = useState(\"\");\r\n  // Cards data state\r\n  const [cardsData, setCardsData] = useState({});\r\n  // Charts data state\r\n  const [chartsData, setChartsData] = useState({});\r\n\r\n  // Main API call for total and statewise data, and update states accordingly\r\n\r\n  // eslint-disable-next-line\r\n  const fetchResources = async () => {\r\n    // Latest response needed for cards\r\n    const latestResponse = await axios.get(\r\n      \"https://api.covid19india.org/data.json\"\r\n    );\r\n\r\n    // history response needed for Charts\r\n    const historyResponse = await axios.get(\r\n      \"https://api.covid19india.org/states_daily.json\"\r\n    );\r\n\r\n    // set Latest Response\r\n    setLatestResponse(latestResponse.data);\r\n    // set History response state\r\n    setHistoryResponse(historyResponse.data.states_daily);\r\n    // set initial State\r\n    setSelectedState(latestResponse.data.statewise[0].statecode);\r\n\r\n    // get cards data and updated in Cards -state\r\n    setCardsData(fetchCardsData(latest_Response, selectedState));\r\n\r\n    // get charts data and update in Chatrs-state\r\n    setChartsData(\r\n      fetchChartsData(history_Response, latest_Response, selectedState)\r\n    );\r\n  };\r\n\r\n  // Useffect with selected state so that it is called when selected state is changed.\r\n\r\n  // eslint-disable-next-line\r\n  useEffect(() => {\r\n    fetchResources();\r\n  }, [selectedState]);\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n        <Header />\r\n        <Container>\r\n          <Grid container spacing={2}>\r\n            <Grid item lg={6} md={6} xs={12}>\r\n              <Cards data={cardsData} />\r\n            </Grid>\r\n            <Grid item lg={6} md={6} xs={12}>\r\n              <Charts data={chartsData} />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}